name: deploy
# To automatically trigger a workflow, use "on" to define which events can cause the workflow to run
on:
  workflow_dispatch:
    inputs:
      profile:
        required: true
        type: string
        description: 'profile name of spring boot application'
      branch:
        required: true
        type: string
        description: 'branch to deploy'
# A workflow run is made up of one or more "jobs", which run in parallel by default.
jobs:
  # "build" is job_id it is unique identifier
  build:
    # define the type of machine(runner) to run the job on.
    runs-on: ubuntu-latest
    # A job contains a sequence of tasks called "steps". Steps can run commands,
    steps:

      - name: check-out
        # "uses" keyword is used within a "step" and specify it should use "actions"
        uses: actions/checkout@v4 # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: set up jdk temurin 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'

      - name: build with gradle
        run: |
          chmod +x ./gradlew
          ./gradlew :web:bootJar -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image # -f 옵션으로 경로 지정
        run: |
          echo "Building Docker image..."
          docker build -t ssc-backend -f web/Dockerfile .
          docker tag ssc-backend:latest ${{ secrets[format('{0}_ECR_REPOSITORY_URI', github.event.inputs.profile)] }}:latest
          echo "Docker image tagged as ${{ secrets[format('{0}_ECR_REPOSITORY_URI', github.event.inputs.profile)] }}:latest"

      - name: Push Docker Image to Amazon ECR
        run: |
          echo "Pushing Docker image to Amazon ECR..."
          docker push ${{ secrets[format('{0}_ECR_REPOSITORY_URI', github.event.inputs.profile)] }}:latest
          echo "Docker image pushed successfully."

      - name: Create .env file
        run: |
          echo "SPRING_PROFILES_ACTIVE=${{ github.event.inputs.profile }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets[format('{0}_jwt_secret', github.event.inputs.profile)] }}" >> .env
          echo "MONGODB_URI=${{ secrets[format('{0}_mongodb_uri', github.event.inputs.profile)] }}" >> .env
          echo "CORS_ALLOWED_ORIGINS=${{ secrets[format('{0}_cors_allowed_origins', github.event.inputs.profile)] }}" >> .env
          echo ".env file created with necessary environment variables."

      - name: Setup SSH Agent for Bastion
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AWS_PEM_KEY }}

      - name: Setup SSH Agent for Target
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AWS_PEM_KEY }}

      - name: Copy .env file and Deploy 1
        if: github.event.inputs.profile == 'prod'
        env:
          BASTION_HOST: ${{ secrets.BASTION_HOST }}
          TARGET_HOST: ${{ secrets[format('{0}_SSH_HOST_1', github.event.inputs.profile)] }}
          SSH_USER: ${{ secrets[format('{0}_SSH_USER', github.event.inputs.profile)] }}
          ECR_IMAGE_URI: ${{ secrets[format('{0}_ECR_REPOSITORY_URI', github.event.inputs.profile)] }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Starting SSH tunnel to $TARGET_HOST via $BASTION_HOST..."
          ssh -o StrictHostKeyChecking=no -N -L 2222:$TARGET_HOST:22 $SSH_USER@$BASTION_HOST &
          TUNNEL_PID=$!
          sleep 5  # SSH 터널 안정화 대기
          
          echo "Copying .env file to target host through SSH tunnel..."
          scp -P 2222 -o StrictHostKeyChecking=no .env $SSH_USER@localhost:~/.env || exit 1
          
          echo "Deploying Docker container on target host through SSH tunnel..."
          ssh -p 2222 -o StrictHostKeyChecking=no $SSH_USER@localhost << EOF
            set -e
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_IMAGE_URI
            sudo docker pull $ECR_IMAGE_URI:latest
            sudo docker stop ssc-backend || true
            sudo docker rm ssc-backend || true
            sudo docker run -d --name ssc-backend -p 8080:8080 \
              --env-file ~/.env \
              $ECR_IMAGE_URI:latest
            sudo docker image prune -a -f
          EOF
          
          kill $TUNNEL_PID
          echo "Deployment to production via Bastion complete."

      - name: Copy .env file and Deploy 2
        if: github.event.inputs.profile == 'prod'
        env:
          BASTION_HOST: ${{ secrets.BASTION_HOST }}
          TARGET_HOST: ${{ secrets[format('{0}_SSH_HOST_2', github.event.inputs.profile)] }}
          SSH_USER: ${{ secrets[format('{0}_SSH_USER', github.event.inputs.profile)] }}
          ECR_IMAGE_URI: ${{ secrets[format('{0}_ECR_REPOSITORY_URI', github.event.inputs.profile)] }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Starting SSH tunnel to $TARGET_HOST via $BASTION_HOST..."
          ssh -o StrictHostKeyChecking=no -N -L 2222:$TARGET_HOST:22 $SSH_USER@$BASTION_HOST &
          TUNNEL_PID=$!
          sleep 5  # SSH 터널 안정화 대기
          
          echo "Copying .env file to target host through SSH tunnel..."
          scp -P 2222 -o StrictHostKeyChecking=no .env $SSH_USER@localhost:~/.env || exit 1
          
          echo "Deploying Docker container on target host through SSH tunnel..."
          ssh -p 2222 -o StrictHostKeyChecking=no $SSH_USER@localhost << EOF
            set -e
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_IMAGE_URI
            sudo docker pull $ECR_IMAGE_URI:latest
            sudo docker stop ssc-backend || true
            sudo docker rm ssc-backend || true
            sudo docker run -d --name ssc-backend -p 8080:8080 \
              --env-file ~/.env \
              $ECR_IMAGE_URI:latest
            sudo docker image prune -a -f
          EOF
          
          kill $TUNNEL_PID
          echo "Deployment to production via Bastion complete."

      - name: Direct Deploy to EC2 (for Development)
        if: github.event.inputs.profile != 'prod'
        env:
          SSH_HOST: ${{ secrets[format('{0}_SSH_HOST', github.event.inputs.profile)] }}
          SSH_USER: ${{ secrets[format('{0}_SSH_USER', github.event.inputs.profile)] }}
          ECR_IMAGE_URI: ${{ secrets[format('{0}_ECR_REPOSITORY_URI', github.event.inputs.profile)] }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Copying .env file to target EC2 instance for development..."
          scp -o StrictHostKeyChecking=no .env $SSH_USER@$SSH_HOST:~/.env
          
          echo "Starting deployment on development EC2 instance..."
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_IMAGE_URI
            sudo docker pull $ECR_IMAGE_URI:latest
            sudo docker stop ssc-backend || true
            sudo docker rm ssc-backend || true
            sudo docker run -d --name ssc-backend -p 8080:8080 --env-file ~/.env $ECR_IMAGE_URI:latest
            sudo docker image prune -a -f
          EOF
          
          echo "Development deployment complete."